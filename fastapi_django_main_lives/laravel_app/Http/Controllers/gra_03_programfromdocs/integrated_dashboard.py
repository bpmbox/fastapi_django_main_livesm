#!/usr/bin/env python3
"""
Áµ±ÂêàÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ - ÊúÄÁµÇÁâà
GitHub ISSUEÁõ£Ë¶ñ„ÄÅGPT-ENGINEERÁµ±Âêà„ÄÅ„Ç∑„Çπ„ÉÜ„É†Ëá™ÂãïÂåñ„ÅÆÁ∑èÂêàÁÆ°ÁêÜÁîªÈù¢
"""

import gradio as gr
import sqlite3
import os
import threading
import time
from datetime import datetime
from pathlib import Path

# ‰æùÂ≠ò„É¢„Ç∏„É•„Éº„É´„ÅÆÂÆâÂÖ®„Å™„Ç§„É≥„Éù„Éº„Éà
try:
    from .github_issue_monitor import GitHubIssueMonitor
except ImportError:
    try:
        from github_issue_monitor import GitHubIssueMonitor
    except ImportError:
        # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É¢„ÉÉ„ÇØclass
        class GitHubIssueMonitor:
            def __init__(self, *args, **kwargs):
                self.monitoring = False
            def start_monitoring(self):
                return "‚ö†Ô∏è GitHubÁõ£Ë¶ñ„É¢„Ç∏„É•„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì"
            def stop_monitoring(self):
                return "‚ö†Ô∏è GitHubÁõ£Ë¶ñ„É¢„Ç∏„É•„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì"
            def get_monitoring_status(self):
                return {'monitoring': False, 'repo': 'N/A', 'check_interval': 0, 'processed_count': 0}

try:
    from .system_automation import SystemAutomation
except ImportError:
    try:
        from system_automation import SystemAutomation
    except ImportError:
        # „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „É¢„ÉÉ„ÇØclass
        class SystemAutomation:
            def __init__(self, *args, **kwargs):
                pass

class IntegratedDashboard:
    """Áµ±ÂêàÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ"""
    
    def __init__(self):
        self.github_token = os.environ.get('GITHUB_TOKEN', '')
        self.repo_owner = "miyataken999"  # ÂÆüÈöõ„ÅÆ„É¶„Éº„Ç∂„ÉºÂêç
        self.repo_name = "fastapi_django_main_live"  # ÂÆüÈöõ„ÅÆ„É™„Éù„Ç∏„Éà„É™Âêç
        self.issue_monitor = None
        self.automation = None
        
        if self.github_token and len(self.github_token) > 10:
            self.automation = SystemAutomation(self.github_token)
    
    def get_system_status(self):
        """„Ç∑„Çπ„ÉÜ„É†ÂÖ®‰Ωì„ÅÆÁä∂Ê≥ÅÂèñÂæó"""
        status = {
            'github_api': 'Unknown',
            'issue_monitoring': 'Stopped',
            'prompt_database': 'Unknown',
            'gpt_engineer': 'Unknown',
            'automation': 'Unknown'
        }
        
        # GitHub APIÁä∂Ê≥Å
        if self.github_token and len(self.github_token) > 10:
            status['github_api'] = 'Connected'
        else:
            status['github_api'] = 'No Token'
        
        # ISSUEÁõ£Ë¶ñÁä∂Ê≥Å
        if self.issue_monitor and self.issue_monitor.monitoring:
            status['issue_monitoring'] = 'Running'
        
        # „Éó„É≠„É≥„Éó„ÉàDBÁä∂Ê≥Å
        try:
            conn = sqlite3.connect('/workspaces/fastapi_django_main_live/prompts.db')
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM prompts')
            count = cursor.fetchone()[0]
            conn.close()
            status['prompt_database'] = f'Active ({count} prompts)'
        except:
            status['prompt_database'] = 'Error'
        
        # GPT-ENGINEERÁä∂Ê≥Å
        openai_key = os.environ.get('OPENAI_API_KEY', '')
        if openai_key and len(openai_key) > 10:
            status['gpt_engineer'] = 'API Key Set'
        else:
            status['gpt_engineer'] = 'No API Key'
        
        # Ëá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å
        if self.automation:
            status['automation'] = 'Ready'
        else:
            status['automation'] = 'Not Configured'
        
        return status
    
    def get_recent_activities(self):
        """ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£ÂèñÂæó"""
        activities = []
        
        try:
            # „Éó„É≠„É≥„Éó„ÉàÂÆüË°åÂ±•Ê≠¥
            conn = sqlite3.connect('/workspaces/fastapi_django_main_live/prompts.db')
            cursor = conn.cursor()
            cursor.execute('''
                SELECT title, execution_status, created_at, system_type
                FROM prompts 
                ORDER BY created_at DESC 
                LIMIT 10
            ''')
            prompts = cursor.fetchall()
            
            for prompt in prompts:
                activities.append({
                    'time': prompt[2],
                    'type': 'Prompt',
                    'title': prompt[0],
                    'status': prompt[1],
                    'system_type': prompt[3]
                })
            
            conn.close()
            
            # GitHub ISSUEÂ±•Ê≠¥
            issue_db = '/workspaces/fastapi_django_main_live/github_issues.db'
            if Path(issue_db).exists():
                conn = sqlite3.connect(issue_db)
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT title, status, processed_at, issue_number
                    FROM processed_issues 
                    ORDER BY processed_at DESC 
                    LIMIT 5
                ''')
                issues = cursor.fetchall()
                
                for issue in issues:
                    activities.append({
                        'time': issue[2],
                        'type': 'GitHub Issue',
                        'title': f"#{issue[3]} {issue[0]}",
                        'status': issue[1],
                        'system_type': 'external'
                    })
                
                conn.close()
        
        except Exception as e:
            activities.append({
                'time': datetime.now().isoformat(),
                'type': 'Error',
                'title': f'Activity fetch error: {str(e)}',
                'status': 'error',
                'system_type': 'system'
            })
        
        # ÊôÇÈñìÈ†Ü„Åß„ÇΩ„Éº„Éà
        activities.sort(key=lambda x: x['time'], reverse=True)
        return activities[:15]
    
    def start_issue_monitoring(self):
        """ISSUEÁõ£Ë¶ñÈñãÂßã"""
        if not self.github_token or len(self.github_token) < 10:
            return "‚ùå GitHub Token „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì", ""
        
        try:
            if self.issue_monitor and self.issue_monitor.monitoring:
                return "‚ö†Ô∏è Áõ£Ë¶ñ„ÅØÊó¢„Å´ÂÆüË°å‰∏≠„Åß„Åô", ""
            
            self.issue_monitor = GitHubIssueMonitor(
                self.github_token, 
                self.repo_owner, 
                self.repo_name
            )
            self.issue_monitor.start_monitoring()
            
            return "‚úÖ GitHub ISSUEÁõ£Ë¶ñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü", self.format_monitoring_status()
        
        except Exception as e:
            return f"‚ùå Áõ£Ë¶ñÈñãÂßã„Ç®„É©„Éº: {str(e)}", ""
    
    def stop_issue_monitoring(self):
        """ISSUEÁõ£Ë¶ñÂÅúÊ≠¢"""
        try:
            if self.issue_monitor:
                self.issue_monitor.stop_monitoring()
                return "‚èπÔ∏è GitHub ISSUEÁõ£Ë¶ñ„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü", ""
            else:
                return "‚ö†Ô∏è Áõ£Ë¶ñ„ÅØÂÆüË°å„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì", ""
        
        except Exception as e:
            return f"‚ùå Áõ£Ë¶ñÂÅúÊ≠¢„Ç®„É©„Éº: {str(e)}", ""
    
    def format_system_status(self):
        """„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        status = self.get_system_status()
        
        formatted = "üñ•Ô∏è **„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å**\n\n"
        
        status_icons = {
            'Connected': '‚úÖ',
            'Running': 'üü¢',
            'Active': '‚úÖ',
            'Ready': '‚úÖ',
            'API Key Set': '‚úÖ',
            'Stopped': 'üî¥',
            'No Token': '‚ùå',
            'No API Key': '‚ö†Ô∏è',
            'Not Configured': '‚ö†Ô∏è',
            'Error': '‚ùå',
            'Unknown': '‚ùì'
        }
        
        items = [
            ('GitHub API', status['github_api']),
            ('ISSUEÁõ£Ë¶ñ', status['issue_monitoring']),
            ('„Éó„É≠„É≥„Éó„ÉàDB', status['prompt_database']),
            ('GPT-ENGINEER', status['gpt_engineer']),
            ('Ëá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†', status['automation'])
        ]
        
        for name, state in items:
            icon = next((icon for key, icon in status_icons.items() if key in state), '‚ùì')
            formatted += f"{icon} **{name}**: {state}\n"
        
        return formatted
    
    def format_recent_activities(self):
        """ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        activities = self.get_recent_activities()
        
        if not activities:
            return "üì≠ ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì"
        
        formatted = "üìã **ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£**\n\n"
        
        for activity in activities:
            time_str = activity['time'][:16] if activity['time'] else 'Unknown'
            type_icon = {
                'Prompt': 'üìù',
                'GitHub Issue': 'üîó',
                'Error': '‚ùå'
            }.get(activity['type'], 'üìå')
            
            status_icon = {
                'completed': '‚úÖ',
                'running': 'üîÑ',
                'pending': '‚è≥',
                'failed': '‚ùå',
                'approved': 'üëç',
                'processing': 'üîÑ',
                'error': '‚ùå'
            }.get(activity['status'], '‚ùì')
            
            formatted += f"{type_icon} **{activity['title'][:50]}**\n"
            formatted += f"   {status_icon} {activity['status']} - {time_str}\n\n"
        
        return formatted
    
    def format_monitoring_status(self):
        """Áõ£Ë¶ñÁä∂Ê≥Å„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        if not self.issue_monitor:
            return "üî¥ ISSUEÁõ£Ë¶ñ: Êú™ÈñãÂßã"
        
        status = self.issue_monitor.get_monitoring_status()
        
        formatted = f"""üéØ **ISSUEÁõ£Ë¶ñÁä∂Ê≥Å**

üì° **Áõ£Ë¶ñÁä∂ÊÖã**: {'üü¢ Á®ºÂÉç‰∏≠' if status['monitoring'] else 'üî¥ ÂÅúÊ≠¢'}
üìÅ **„É™„Éù„Ç∏„Éà„É™**: {status['repo']}
‚è±Ô∏è **„ÉÅ„Çß„ÉÉ„ÇØÈñìÈöî**: {status['check_interval']}Áßí
üìä **Âá¶ÁêÜÊ∏à„Åø**: {status['processed_count']}‰ª∂
"""
        return formatted
    
    def create_dashboard_interface(self):
        """„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ‰ΩúÊàê"""
        
        with gr.Blocks(title="üöÄ Áµ±ÂêàÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ", theme="soft") as dashboard:
            gr.Markdown("# üöÄ Áµ±Âêà„Éó„É≠„É≥„Éó„ÉàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† - ÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ")
            gr.Markdown("""
            **GitHub ISSUEÁõ£Ë¶ñ + GPT-ENGINEERËá™ÂãïÁîüÊàê + „Ç∑„Çπ„ÉÜ„É†Áµ±Âêà**„ÅÆÁ∑èÂêàÁÆ°ÁêÜÁîªÈù¢
            """)
            
            with gr.Row():
                with gr.Column(scale=2):
                    # „Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å
                    system_status = gr.Markdown(
                        value=self.format_system_status(),
                        label="„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å"
                    )
                    
                    # Áõ£Ë¶ñÂà∂Âæ°
                    with gr.Group():
                        gr.Markdown("## üéõÔ∏è Áõ£Ë¶ñÂà∂Âæ°")
                        
                        with gr.Row():
                            start_btn = gr.Button("üöÄ ISSUEÁõ£Ë¶ñÈñãÂßã", variant="primary")
                            stop_btn = gr.Button("‚èπÔ∏è Áõ£Ë¶ñÂÅúÊ≠¢", variant="secondary")
                        
                        monitor_result = gr.Textbox(
                            label="ÂÆüË°åÁµêÊûú",
                            lines=2,
                            interactive=False
                        )
                        
                        monitoring_status = gr.Markdown(
                            value=self.format_monitoring_status(),
                            label="Áõ£Ë¶ñÁä∂Ê≥Å"
                        )
                
                with gr.Column(scale=3):
                    # ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£
                    activities = gr.Markdown(
                        value=self.format_recent_activities(),
                        label="ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£"
                    )
            
            with gr.Row():
                # Êõ¥Êñ∞„Éú„Çø„É≥
                refresh_btn = gr.Button("üîÑ ÁîªÈù¢Êõ¥Êñ∞", variant="secondary")
                
                # Ë®≠ÂÆö„É™„É≥„ÇØ
                gr.Markdown("""
                ### üîó „ÇØ„Ç§„ÉÉ„ÇØ„É™„É≥„ÇØ
                - [„Éó„É≠„É≥„Éó„ÉàÁÆ°ÁêÜ](http://localhost:7861) - „É°„Ç§„É≥„Ç∑„Çπ„ÉÜ„É†
                - [GitHub Repository](https://github.com/miyataken999/fastapi_django_main_live) - ISSUEÊäïÁ®ø
                - [API Documentation](http://localhost:8000/docs) - ÁîüÊàê„Ç∑„Çπ„ÉÜ„É†API
                """)
            
            # Ë®≠ÂÆöÊÉÖÂ†±Ë°®Á§∫
            with gr.Accordion("‚öôÔ∏è „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö", open=False):
                config_info = gr.Markdown(f"""
                ### üìã ÁèæÂú®„ÅÆË®≠ÂÆö
                
                **GitHubË®≠ÂÆö**
                - Repository: {self.repo_owner}/{self.repo_name}
                - Token: {'‚úÖ Ë®≠ÂÆöÊ∏à„Åø' if self.github_token else '‚ùå Êú™Ë®≠ÂÆö'}
                
                **APIË®≠ÂÆö**
                - OpenAI: {'‚úÖ Ë®≠ÂÆöÊ∏à„Åø' if os.environ.get('OPENAI_API_KEY') else '‚ùå Êú™Ë®≠ÂÆö'}
                
                **„Éá„Éº„Çø„Éô„Éº„Çπ**
                - „Éó„É≠„É≥„Éó„ÉàDB: /workspaces/fastapi_django_main_live/prompts.db
                - ISSUEÂ±•Ê≠¥DB: /workspaces/fastapi_django_main_live/github_issues.db
                
                **Áõ£Ë¶ñË®≠ÂÆö**
                - „ÉÅ„Çß„ÉÉ„ÇØÈñìÈöî: 30Áßí
                - ÂØæË±°„É©„Éô„É´: system-generation, prompt-request
                """)
            
            # „Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
            def refresh_all():
                return (
                    self.format_system_status(),
                    self.format_recent_activities(),
                    self.format_monitoring_status()
                )
            
            start_btn.click(
                fn=self.start_issue_monitoring,
                outputs=[monitor_result, monitoring_status]
            )
            
            stop_btn.click(
                fn=self.stop_issue_monitoring,
                outputs=[monitor_result, monitoring_status]
            )
            
            refresh_btn.click(
                fn=refresh_all,
                outputs=[system_status, activities, monitoring_status]
            )
            
            # Ëá™ÂãïÊõ¥Êñ∞Ôºà30ÁßíÈñìÈöîÔºâ
            def auto_refresh():
                while True:
                    time.sleep(30)
                    yield refresh_all()
            
            # ÂàùÊúüË°®Á§∫ÊôÇ„Å´Ëá™ÂãïÊõ¥Êñ∞ÈñãÂßã
            dashboard.load(
                fn=refresh_all,
                outputs=[system_status, activities, monitoring_status]
            )
        
        return dashboard

# „É°„Ç§„É≥„Ç¢„Éó„É™Áî®„ÅÆGradio„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
# Use a factory function to avoid rendering during import
def create_gradio_interface():
    dashboard_instance = IntegratedDashboard()
    return dashboard_instance.create_dashboard_interface()

gradio_interface = create_gradio_interface

# „Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Çø„Ç§„Éà„É´ÔºàËá™ÂãïÊ§úÂá∫Áî®Ôºâ
interface_title = "üöÄ Áµ±ÂêàÁÆ°ÁêÜ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ"

if __name__ == "__main__":
    # Áõ¥Êé•ÂÆüË°åÊôÇ„ÅÆÂá¶ÁêÜ
    interface = gradio_interface
    interface.launch(
        share=True,
        server_name="0.0.0.0", 
        server_port=7863
    )
