#!/usr/bin/env python3
"""
GitHub ISSUEËá™ÂãïÂåñ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ - „É°„Ç§„É≥„Ç¢„Éó„É™Áµ±ÂêàÁâà
„É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥Ôºà7860Áï™„Éù„Éº„ÉàÔºâ„Å´Áµ±Âêà„Åï„Çå„ÇãGradio„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
"""

import gradio as gr
import sqlite3
import os
import threading
import time
from datetime import datetime
from pathlib import Path
import importlib.util

# Êó¢Â≠ò„ÅÆ„É¢„Ç∏„É•„Éº„É´„ÇíÂãïÁöÑ„Å´„Ç§„É≥„Éù„Éº„Éà
def load_module_from_path(module_name: str, file_path: str):
    """„Éï„Ç°„Ç§„É´„Éë„Çπ„Åã„Çâ„É¢„Ç∏„É•„Éº„É´„ÇíÂãïÁöÑ„Å´Ë™≠„ÅøËæº„Åø"""
    try:
        spec = importlib.util.spec_from_file_location(module_name, file_path)
        if spec and spec.loader:
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            return module
    except Exception as e:
        print(f"Failed to load {module_name}: {e}")
    return None

# GitHub ISSUEÁõ£Ë¶ñ„É¢„Ç∏„É•„Éº„É´„ÇíË™≠„ÅøËæº„Åø
base_path = "/workspaces/fastapi_django_main_live/controllers/gra_03_programfromdocs"
github_monitor_module = load_module_from_path("github_issue_monitor", f"{base_path}/github_issue_monitor.py")
system_automation_module = load_module_from_path("system_automation", f"{base_path}/system_automation.py")

class GitHubIssueDashboard:
    """GitHub ISSUEËá™ÂãïÂåñ„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ"""
    
    def __init__(self):
        self.github_token = os.environ.get('GITHUB_TOKEN', '')
        self.repo_owner = "miyataken999"
        self.repo_name = "fastapi_django_main_live"
        self.issue_monitor = None
        self.automation = None
        
        # „É¢„Ç∏„É•„Éº„É´„ÅåÊ≠£Â∏∏„Å´Ë™≠„ÅøËæº„Åæ„Çå„ÅüÂ†¥Âêà„ÅÆ„ÅøÂàùÊúüÂåñ
        if github_monitor_module and system_automation_module and self.github_token:
            try:
                self.automation = system_automation_module.SystemAutomation(self.github_token)
            except Exception as e:
                print(f"Failed to initialize SystemAutomation: {e}")
    
    def get_system_status(self):
        """„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥ÅÂèñÂæó"""
        status = {
            'github_api': 'Unknown',
            'issue_monitoring': 'Stopped',
            'prompt_database': 'Unknown',
            'gpt_engineer': 'Unknown',
            'automation': 'Unknown'
        }
        
        # GitHub APIÁä∂Ê≥Å
        if self.github_token and len(self.github_token) > 10:
            status['github_api'] = 'Connected'
        else:
            status['github_api'] = 'No Token'
        
        # ISSUEÁõ£Ë¶ñÁä∂Ê≥Å
        if self.issue_monitor and hasattr(self.issue_monitor, 'monitoring') and self.issue_monitor.monitoring:
            status['issue_monitoring'] = 'Running'
        
        # „Éó„É≠„É≥„Éó„ÉàDBÁä∂Ê≥Å
        try:
            prompt_db = '/workspaces/fastapi_django_main_live/prompts.db'
            if Path(prompt_db).exists():
                status['prompt_database'] = 'Active'
            else:
                status['prompt_database'] = 'Not Found'
        except:
            status['prompt_database'] = 'Error'
        
        # GPT-ENGINEERÁä∂Ê≥Å
        if os.environ.get('OPENAI_API_KEY'):
            status['gpt_engineer'] = 'API Key Set'
        else:
            status['gpt_engineer'] = 'No API Key'
        
        # Ëá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å
        if self.automation:
            status['automation'] = 'Ready'
        else:
            status['automation'] = 'Not Configured'
        
        return status
    
    def get_recent_activities(self):
        """ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£ÂèñÂæó"""
        activities = []
        
        try:
            # „Éó„É≠„É≥„Éó„ÉàÁôªÈå≤Â±•Ê≠¥
            prompt_db = '/workspaces/fastapi_django_main_live/prompts.db'
            if Path(prompt_db).exists():
                conn = sqlite3.connect(prompt_db)
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT title, created_at 
                    FROM prompts 
                    ORDER BY created_at DESC 
                    LIMIT 5
                ''')
                prompts = cursor.fetchall()
                
                for prompt in prompts:
                    activities.append({
                        'time': prompt[1],
                        'type': 'Prompt',
                        'title': prompt[0],
                        'status': 'completed',
                        'system_type': 'internal'
                    })
                
                conn.close()
            
            # GitHub ISSUEÂ±•Ê≠¥
            issue_db = '/workspaces/fastapi_django_main_live/github_issues.db'
            if Path(issue_db).exists():
                conn = sqlite3.connect(issue_db)
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT title, status, processed_at, issue_number
                    FROM processed_issues 
                    ORDER BY processed_at DESC 
                    LIMIT 5
                ''')
                issues = cursor.fetchall()
                
                for issue in issues:
                    activities.append({
                        'time': issue[2],
                        'type': 'GitHub Issue',
                        'title': f"#{issue[3]} {issue[0]}",
                        'status': issue[1],
                        'system_type': 'external'
                    })
                
                conn.close()
        
        except Exception as e:
            activities.append({
                'time': datetime.now().isoformat(),
                'type': 'Error',
                'title': f'Activity fetch error: {str(e)}',
                'status': 'error',
                'system_type': 'system'
            })
        
        # ÊôÇÈñìÈ†Ü„Åß„ÇΩ„Éº„Éà
        activities.sort(key=lambda x: x['time'], reverse=True)
        return activities[:15]
    
    def start_issue_monitoring(self):
        """ISSUEÁõ£Ë¶ñÈñãÂßã"""
        if not self.github_token or len(self.github_token) < 10:
            return "‚ùå GitHub Token „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì", ""
        
        if not github_monitor_module:
            return "‚ùå GitHubÁõ£Ë¶ñ„É¢„Ç∏„É•„Éº„É´„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì", ""
        
        try:
            if self.issue_monitor and hasattr(self.issue_monitor, 'monitoring') and self.issue_monitor.monitoring:
                return "‚ö†Ô∏è Áõ£Ë¶ñ„ÅØÊó¢„Å´ÂÆüË°å‰∏≠„Åß„Åô", ""
            
            self.issue_monitor = github_monitor_module.GitHubIssueMonitor(
                self.github_token, 
                self.repo_owner, 
                self.repo_name
            )
            self.issue_monitor.start_monitoring()
            
            return "‚úÖ GitHub ISSUEÁõ£Ë¶ñ„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü", self.format_monitoring_status()
        
        except Exception as e:
            return f"‚ùå Áõ£Ë¶ñÈñãÂßã„Ç®„É©„Éº: {str(e)}", ""
    
    def stop_issue_monitoring(self):
        """ISSUEÁõ£Ë¶ñÂÅúÊ≠¢"""
        try:
            if self.issue_monitor and hasattr(self.issue_monitor, 'stop_monitoring'):
                self.issue_monitor.stop_monitoring()
                return "‚èπÔ∏è GitHub ISSUEÁõ£Ë¶ñ„ÇíÂÅúÊ≠¢„Åó„Åæ„Åó„Åü", ""
            else:
                return "‚ö†Ô∏è Áõ£Ë¶ñ„ÅØÂÆüË°å„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì", ""
        
        except Exception as e:
            return f"‚ùå Áõ£Ë¶ñÂÅúÊ≠¢„Ç®„É©„Éº: {str(e)}", ""
    
    def format_system_status(self):
        """„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        status = self.get_system_status()
        
        formatted = "üñ•Ô∏è **„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å**\n\n"
        
        status_icons = {
            'Connected': '‚úÖ',
            'Running': 'üü¢',
            'Active': '‚úÖ',
            'Ready': '‚úÖ',
            'API Key Set': '‚úÖ',
            'Stopped': 'üî¥',
            'No Token': '‚ùå',
            'No API Key': '‚ö†Ô∏è',
            'Not Configured': '‚ö†Ô∏è',
            'Error': '‚ùå',
            'Unknown': '‚ùì'
        }
        
        items = [
            ('GitHub API', status['github_api']),
            ('ISSUEÁõ£Ë¶ñ', status['issue_monitoring']),
            ('„Éó„É≠„É≥„Éó„ÉàDB', status['prompt_database']),
            ('GPT-ENGINEER', status['gpt_engineer']),
            ('Ëá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†', status['automation'])
        ]
        
        for name, state in items:
            icon = next((icon for key, icon in status_icons.items() if key in state), '‚ùì')
            formatted += f"{icon} **{name}**: {state}\n"
        
        return formatted
    
    def format_recent_activities(self):
        """ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        activities = self.get_recent_activities()
        
        if not activities:
            return "üì≠ ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì"
        
        formatted = "üìã **ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£**\n\n"
        
        for activity in activities:
            time_str = activity['time'][:16] if activity['time'] else 'Unknown'
            type_icon = {
                'Prompt': 'üìù',
                'GitHub Issue': 'üîó',
                'Error': '‚ùå'
            }.get(activity['type'], 'üìå')
            
            status_icon = {
                'completed': '‚úÖ',
                'running': 'üîÑ',
                'pending': '‚è≥',
                'failed': '‚ùå',
                'approved': 'üëç',
                'processing': 'üîÑ',
                'error': '‚ùå'
            }.get(activity['status'], '‚ùì')
            
            formatted += f"{type_icon} **{activity['title'][:50]}**\n"
            formatted += f"   {status_icon} {activity['status']} - {time_str}\n\n"
        
        return formatted
    
    def format_monitoring_status(self):
        """Áõ£Ë¶ñÁä∂Ê≥Å„ÅÆ„Éï„Ç©„Éº„Éû„ÉÉ„Éà"""
        if not self.issue_monitor:
            return "üî¥ ISSUEÁõ£Ë¶ñ: Êú™ÈñãÂßã"
        
        try:
            if hasattr(self.issue_monitor, 'get_monitoring_status'):
                status = self.issue_monitor.get_monitoring_status()
                formatted = f"""üéØ **ISSUEÁõ£Ë¶ñÁä∂Ê≥Å**

üì° **Áõ£Ë¶ñÁä∂ÊÖã**: {'üü¢ Á®ºÂÉç‰∏≠' if status.get('monitoring', False) else 'üî¥ ÂÅúÊ≠¢'}
üìÅ **„É™„Éù„Ç∏„Éà„É™**: {status.get('repo', 'Unknown')}
‚è±Ô∏è **„ÉÅ„Çß„ÉÉ„ÇØÈñìÈöî**: {status.get('check_interval', 'Unknown')}Áßí
üìä **Âá¶ÁêÜÊ∏à„Åø**: {status.get('processed_count', 0)}‰ª∂
"""
                return formatted
            else:
                return "üî¥ ISSUEÁõ£Ë¶ñ: „Çπ„ÉÜ„Éº„Çø„Çπ‰∏çÊòé"
        except Exception as e:
            return f"üî¥ ISSUEÁõ£Ë¶ñ: „Ç®„É©„Éº ({str(e)})"

# Gradio„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„ÇπÂÆöÁæ©
def gradio_interface():
    """„É°„Ç§„É≥„Ç¢„Éó„É™„Å´Áµ±Âêà„Åï„Çå„ÇãGradio„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ"""
    
    dashboard = GitHubIssueDashboard()
    
    with gr.Blocks(title="üöÄ GitHub ISSUEËá™ÂãïÂåñ", theme="soft") as interface:
        gr.Markdown("# üöÄ GitHub ISSUEËá™ÂãïÂåñ„Ç∑„Çπ„ÉÜ„É†")
        gr.Markdown("""
        **GitHub ISSUEÁõ£Ë¶ñ + AIËß£Êûê + GPT-ENGINEERËá™ÂãïÁîüÊàê**„ÅÆÁµ±Âêà„Ç∑„Çπ„ÉÜ„É†
        """)
        
        with gr.Row():
            with gr.Column(scale=2):
                # „Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å
                system_status = gr.Markdown(
                    value=dashboard.format_system_status(),
                    label="„Ç∑„Çπ„ÉÜ„É†Áä∂Ê≥Å"
                )
                
                # Áõ£Ë¶ñÂà∂Âæ°
                with gr.Group():
                    gr.Markdown("## üéõÔ∏è Áõ£Ë¶ñÂà∂Âæ°")
                    
                    with gr.Row():
                        start_btn = gr.Button("üöÄ ISSUEÁõ£Ë¶ñÈñãÂßã", variant="primary")
                        stop_btn = gr.Button("‚èπÔ∏è Áõ£Ë¶ñÂÅúÊ≠¢", variant="secondary")
                    
                    monitor_result = gr.Textbox(
                        label="ÂÆüË°åÁµêÊûú",
                        lines=2,
                        interactive=False
                    )
                    
                    monitoring_status = gr.Markdown(
                        value=dashboard.format_monitoring_status(),
                        label="Áõ£Ë¶ñÁä∂Ê≥Å"
                    )
            
            with gr.Column(scale=3):
                # ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£
                activities = gr.Markdown(
                    value=dashboard.format_recent_activities(),
                    label="ÊúÄËøë„ÅÆ„Ç¢„ÇØ„ÉÜ„Ç£„Éì„ÉÜ„Ç£"
                )
        
        with gr.Row():
            # Êõ¥Êñ∞„Éú„Çø„É≥
            refresh_btn = gr.Button("üîÑ ÁîªÈù¢Êõ¥Êñ∞", variant="secondary")
            
            # Ë®≠ÂÆö„É™„É≥„ÇØ
            gr.Markdown("""
            ### üîó „ÇØ„Ç§„ÉÉ„ÇØ„É™„É≥„ÇØ
            - [GitHub Repository](https://github.com/miyataken999/fastapi_django_main_live) - ISSUEÊäïÁ®ø
            - [API Documentation](http://localhost:8000/docs) - ÁîüÊàê„Ç∑„Çπ„ÉÜ„É†API
            """)
        
        # Ë®≠ÂÆöÊÉÖÂ†±Ë°®Á§∫
        with gr.Accordion("‚öôÔ∏è „Ç∑„Çπ„ÉÜ„É†Ë®≠ÂÆö", open=False):
            gr.Markdown(f"""
            ### üìã ÁèæÂú®„ÅÆË®≠ÂÆö
            
            **GitHubË®≠ÂÆö**
            - Repository: {dashboard.repo_owner}/{dashboard.repo_name}
            - Token: {'‚úÖ Ë®≠ÂÆöÊ∏à„Åø' if dashboard.github_token else '‚ùå Êú™Ë®≠ÂÆö'}
            
            **APIË®≠ÂÆö**
            - OpenAI: {'‚úÖ Ë®≠ÂÆöÊ∏à„Åø' if os.environ.get('OPENAI_API_KEY') else '‚ùå Êú™Ë®≠ÂÆö'}
            
            **„Éá„Éº„Çø„Éô„Éº„Çπ**
            - „Éó„É≠„É≥„Éó„ÉàDB: /workspaces/fastapi_django_main_live/prompts.db
            - ISSUEÂ±•Ê≠¥DB: /workspaces/fastapi_django_main_live/github_issues.db
            
            **Áõ£Ë¶ñË®≠ÂÆö**
            - „ÉÅ„Çß„ÉÉ„ÇØÈñìÈöî: 30Áßí
            - ÂØæË±°„É©„Éô„É´: system-generation, prompt-request
            """)
        
        # „Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
        def refresh_all():
            return (
                dashboard.format_system_status(),
                dashboard.format_recent_activities(),
                dashboard.format_monitoring_status()
            )
        
        start_btn.click(
            fn=dashboard.start_issue_monitoring,
            outputs=[monitor_result, monitoring_status]
        )
        
        stop_btn.click(
            fn=dashboard.stop_issue_monitoring,
            outputs=[monitor_result, monitoring_status]
        )
        
        refresh_btn.click(
            fn=refresh_all,
            outputs=[system_status, activities, monitoring_status]
        )
        
        # ÂàùÊúüË°®Á§∫ÊôÇ„Å´Ëá™ÂãïÊõ¥Êñ∞
        interface.load(
            fn=refresh_all,
            outputs=[system_status, activities, monitoring_status]
        )
    
    return interface

# „Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„Çø„Ç§„Éà„É´ÔºàËá™ÂãïÊ§úÂá∫Áî®Ôºâ
interface_title = "üöÄ GitHub ISSUEËá™ÂãïÂåñ"

if __name__ == "__main__":
    # „ÉÜ„Çπ„ÉàÂÆüË°å
    interface = gradio_interface()
    interface.launch(share=False, server_name="0.0.0.0", server_port=7865)
