#!/usr/bin/env python3
"""
🎨 Artisan - Laravel風コマンドラインツール for Python
=====================================================

Laravel ArtisanコマンドをPythonで再現
便利なCLIツールで開発効率を大幅向上
"""

import sys
import os
import argparse
from pathlib import Path
from datetime import datetime
import importlib.util

class ArtisanCommand:
    """Artisan風コマンドベースクラス"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        
    def handle(self, *args, **kwargs):
        """コマンド実行のメインロジック"""
        raise NotImplementedError("handle method must be implemented")

class MakeControllerCommand(ArtisanCommand):
    """コントローラー作成コマンド"""
    
    def handle(self, name, *args, **kwargs):
        controller_path = self.project_root / "laravel_app" / "Http" / "Controllers" / f"{name}.py"
        controller_content = f'''"""
{name} Controller
=================

Generated by Artisan on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

from fastapi import APIRouter, Request, HTTPException
from typing import Dict, Any

router = APIRouter()

class {name}:
    """
    {name} Controller
    
    Handle HTTP requests for {name.lower()} related operations
    """
    
    def __init__(self):
        self.router = router
    
    @router.get("/")
    async def index(self) -> Dict[str, Any]:
        """
        Display a listing of the resource
        """
        return {{"message": "Hello from {name}!"}}
    
    @router.post("/")
    async def store(self, request: Request) -> Dict[str, Any]:
        """
        Store a newly created resource
        """
        return {{"message": "Resource created successfully"}}
    
    @router.get("/{{id}}")
    async def show(self, id: int) -> Dict[str, Any]:
        """
        Display the specified resource
        """
        return {{"message": f"Showing resource {{id}}"}}
    
    @router.put("/{{id}}")
    async def update(self, id: int, request: Request) -> Dict[str, Any]:
        """
        Update the specified resource
        """
        return {{"message": f"Resource {{id}} updated successfully"}}
    
    @router.delete("/{{id}}")
    async def destroy(self, id: int) -> Dict[str, Any]:
        """
        Remove the specified resource
        """
        return {{"message": f"Resource {{id}} deleted successfully"}}
'''
        
        # ディレクトリ作成
        controller_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ファイル作成
        with open(controller_path, 'w', encoding='utf-8') as f:
            f.write(controller_content)
            
        print(f"✅ Controller created: {controller_path}")
        return True

class MakeModelCommand(ArtisanCommand):
    """モデル作成コマンド"""
    
    def handle(self, name, *args, **kwargs):
        model_path = self.project_root / "laravel_app" / "Models" / f"{name}.py"
        model_content = f'''"""
{name} Model
============

Generated by Artisan on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

from sqlalchemy import Column, Integer, String, DateTime, Boolean
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.sql import func
from typing import Optional

Base = declarative_base()

class {name}(Base):
    """
    {name} Model
    
    SQLAlchemy model for {name.lower()} table
    """
    
    __tablename__ = "{name.lower()}s"
    
    # Primary Key
    id = Column(Integer, primary_key=True, index=True)
    
    # Timestamps
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Add your fields here
    # name = Column(String(255), nullable=False)
    # email = Column(String(255), unique=True, index=True)
    # is_active = Column(Boolean, default=True)
    
    def __repr__(self):
        return f"<{name}(id={{self.id}})>"
    
    def to_dict(self):
        """Convert model to dictionary"""
        return {{
            "id": self.id,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
            # Add your fields here
        }}
'''
        
        # ディレクトリ作成
        model_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ファイル作成
        with open(model_path, 'w', encoding='utf-8') as f:
            f.write(model_content)
            
        print(f"✅ Model created: {model_path}")
        return True

class MakeServiceCommand(ArtisanCommand):
    """サービス作成コマンド"""
    
    def handle(self, name, *args, **kwargs):
        service_path = self.project_root / "laravel_app" / "Services" / f"{name}Service.py"
        service_content = f'''"""
{name} Service
==============

Generated by Artisan on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
"""

from typing import Dict, List, Any, Optional
import asyncio

class {name}Service:
    """
    {name} Service
    
    Business logic for {name.lower()} operations
    """
    
    def __init__(self):
        pass
    
    async def get_all(self) -> List[Dict[str, Any]]:
        """
        Get all {name.lower()} records
        """
        # Implement your logic here
        return []
    
    async def get_by_id(self, id: int) -> Optional[Dict[str, Any]]:
        """
        Get {name.lower()} by ID
        """
        # Implement your logic here
        return None
    
    async def create(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Create new {name.lower()}
        """
        # Implement your logic here
        return {{"message": "{name} created successfully"}}
    
    async def update(self, id: int, data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Update {name.lower()}
        """
        # Implement your logic here
        return {{"message": f"{name} {{id}} updated successfully"}}
    
    async def delete(self, id: int) -> Dict[str, Any]:
        """
        Delete {name.lower()}
        """
        # Implement your logic here
        return {{"message": f"{name} {{id}} deleted successfully"}}
'''
        
        # ディレクトリ作成
        service_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ファイル作成
        with open(service_path, 'w', encoding='utf-8') as f:
            f.write(service_content)
            
        print(f"✅ Service created: {service_path}")
        return True

class MakeHybridControllerCommand(ArtisanCommand):
    """ハイブリッドコントローラー作成コマンド"""
    
    def handle(self, name, controller_type="hybrid", *args, **kwargs):
        if controller_type.lower() == "api":
            base_path = self.project_root / "laravel_app" / "Http" / "Controllers" / "Api"
            parent_class = "FastApiController"
            from_import = "from app.Http.Controllers.Api.FastApiController import FastApiController"
        elif controller_type.lower() == "web":
            base_path = self.project_root / "laravel_app" / "Http" / "Controllers" / "Web"
            parent_class = "WebController"
            from_import = "from app.Http.Controllers.Web.WebController import WebController"
        elif controller_type.lower() == "gradio":
            base_path = self.project_root / "laravel_app" / "Http" / "Controllers" / "Gradio"
            parent_class = "GradioController"
            from_import = "from app.Http.Controllers.Gradio.GradioController import GradioController"
        else:
            base_path = self.project_root / "laravel_app" / "Http" / "Controllers"
            parent_class = "HybridController"
            from_import = "from app.Http.Controllers.HybridController import HybridController"
        
        controller_path = base_path / f"{name}.py"
        controller_content = f'''"""
{name} - Laravel風ハイブリッドコントローラー
Generated by Artisan on {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Type: {controller_type.upper()}
"""

{from_import}
from fastapi import Request, HTTPException
from typing import Dict, Any
import logging

logger = logging.getLogger(__name__)

class {name}({parent_class}):
    """
    {name} 
    
    Laravel風の{controller_type.upper()}コントローラー
    Django + FastAPI + Gradio 統合対応
    """
    
    def __init__(self):
        super().__init__()
        # カスタム初期化処理をここに追加
        
    async def index(self) -> Dict[str, Any]:
        """
        リソース一覧表示
        GET /
        """
        return {{
            "status": "success",
            "data": [
                {{"id": 1, "name": "Sample Resource", "controller": "{name}"}},
            ],
            "message": f"{{self.__class__.__name__}} index called successfully",
            "controller_type": "{controller_type}"
        }}
    
    async def store(self, request: Request) -> Dict[str, Any]:
        """
        新規リソース作成
        POST /
        """
        try:
            body = await request.json()
            return {{
                "status": "success",
                "data": {{
                    "id": 999,
                    "created_data": body,
                    "controller": "{name}",
                    "created_at": "{datetime.now().isoformat()}"
                }},
                "message": "Resource created successfully"
            }}
        except Exception as e:
            logger.error(f"Store error in {{self.__class__.__name__}}: {{e}}")
            raise HTTPException(status_code=400, detail=str(e))
    
    async def show(self, id: int) -> Dict[str, Any]:
        """
        特定リソース表示
        GET /{{id}}
        """
        return {{
            "status": "success",
            "data": {{
                "id": id,
                "name": f"Resource {{id}}",
                "controller": "{name}",
                "type": "{controller_type}_resource"
            }},
            "message": f"Resource {{id}} retrieved successfully"
        }}
    
    async def update(self, id: int, request: Request) -> Dict[str, Any]:
        """
        リソース更新
        PUT /{{id}}
        """
        try:
            body = await request.json()
            return {{
                "status": "success",
                "data": {{
                    "id": id,
                    "updated_data": body,
                    "controller": "{name}",
                    "updated_at": "{datetime.now().isoformat()}"
                }},
                "message": f"Resource {{id}} updated successfully"
            }}
        except Exception as e:
            logger.error(f"Update error in {{self.__class__.__name__}}: {{e}}")
            raise HTTPException(status_code=400, detail=str(e))
    
    async def destroy(self, id: int) -> Dict[str, Any]:
        """
        リソース削除
        DELETE /{{id}}
        """
        return {{
            "status": "success",
            "data": {{
                "id": id,
                "controller": "{name}",
                "deleted_at": "{datetime.now().isoformat()}"
            }},
            "message": f"Resource {{id}} deleted successfully"
        }}'''

        if controller_type.lower() == "gradio":
            controller_content += f'''
    
    def gradio_process(self, input_text: str) -> str:
        """
        Gradio 処理関数
        """
        try:
            # カスタム処理をここに実装
            processed_result = f"{{self.__class__.__name__}} processed: {{input_text}}"
            return processed_result
        except Exception as e:
            logger.error(f"Gradio processing error: {{e}}")
            return f"エラーが発生しました: {{e}}"'''

        controller_content += f'''

# インスタンス作成（必要に応じて）
# {name.lower()}_instance = {name}()
# router = {name.lower()}_instance.router  # FastAPI用
'''
        
        # ディレクトリ作成
        controller_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ファイル作成
        with open(controller_path, 'w', encoding='utf-8') as f:
            f.write(controller_content)
            
        print(f"✅ {controller_type.upper()} Controller created: {controller_path}")
        print(f"📁 Location: {controller_path.relative_to(self.project_root)}")
        print(f"🎯 Type: {controller_type.upper()} (Django + FastAPI + Gradio compatible)")
        return True

class ServeCommand(ArtisanCommand):
    """開発サーバー起動コマンド"""
    
    def handle(self, port=8000, host="0.0.0.0", *args, **kwargs):
        import subprocess
        print(f"🚀 Starting development server on {host}:{port}")
        try:
            subprocess.run([
                "uvicorn", 
                "core.app:app", 
                "--host", str(host), 
                "--port", str(port), 
                "--reload"
            ])
        except KeyboardInterrupt:
            print("\n👋 Server stopped")

class ListRoutesCommand(ArtisanCommand):
    """ルート一覧表示コマンド"""
    
    def handle(self, *args, **kwargs):
        print("🛣️  Application Routes:")
        print("+" + "-" * 50 + "+")
        print("| Method | URI | Controller |")
        print("+" + "-" * 50 + "+")
        
        # ルート情報を動的に取得（実装が必要）
        routes = [
            ("GET", "/", "HomeController@index"),
            ("GET", "/api/health", "HealthController@check"),
        ]
        
        for method, uri, controller in routes:
            print(f"| {method:<6} | {uri:<15} | {controller:<20} |")
        
        print("+" + "-" * 50 + "+")

class ProjectInfoCommand(ArtisanCommand):
    """プロジェクト情報表示コマンド"""
    
    def handle(self, *args, **kwargs):
        print("🏗️  Laravel構造対応 Django+FastAPI+Gradio プロジェクト")
        print("=" * 60)
        print(f"📁 プロジェクトルート: {self.project_root}")
        print(f"🚀 メインエントリーポイント: app.py (Hugging Face Spaces互換)")
        print(f"⚙️  ASGI設定: mysite/asgi.py")
        print(f"🔧 ブートストラップ: bootstrap/app.py")
        print()
        
        # Laravel構造の確認
        laravel_dirs = [
            "laravel_app/Http/Controllers/Api",
            "laravel_app/Http/Controllers/Web", 
            "laravel_app/Http/Controllers/Gradio",
            "laravel_app/Services",
            "laravel_app/Models",
            "laravel_app/Console",
            "routes",
            "bootstrap"
        ]
        
        print("📂 Laravel構造ディレクトリ:")
        for directory in laravel_dirs:
            dir_path = self.project_root / directory
            status = "✅" if dir_path.exists() else "❌"
            print(f"   {status} {directory}")
        
        print()
        print("🔗 エントリーポイント設定:")
        print("   • Hugging Face Spaces: app.py")
        print("   • ASGI サーバー: app:app")
        print("   • Django ASGI: mysite.asgi:app")
        print("   • 開発サーバー: python bootstrap/app.py")
        print()
        
        # Laravel風ルーティング確認
        routes_files = [
            "routes/web.py",
            "routes/api.py", 
            "routes/polls.py",
            "routes/hybrid.py",
            "routes/laravel_routes.py"
        ]
        
        print("🔗 Laravel風ルーティング:")
        for route_file in routes_files:
            route_path = self.project_root / route_file
            status = "✅" if route_path.exists() else "❌"
            print(f"   {status} {route_file}")
        
        print()
        print("📋 利用可能なエンドポイント:")
        print("   • / - Web Routes (Laravel風)")
        print("   • /api/v1/ - API Routes (Laravel風)")
        print("   • /api/polls/ - Polls API")
        print("   • /hybrid/ - Hybrid Routes")
        print("   • /django/admin/ - Django管理画面")

class GradioTestCommand(ArtisanCommand):
    """Gradio機能テストコマンド"""
    
    def __init__(self):
        super().__init__()
        self.base_url = "http://localhost:7860"
        self.gradio_functions = self._discover_gradio_functions()
    
    def _discover_gradio_functions(self):
        """controllers/フォルダからGradio機能を自動発見"""
        gradio_functions = {}
        controllers_path = self.project_root / "controllers"
        
        if not controllers_path.exists():
            return gradio_functions
            
        for item in controllers_path.iterdir():
            if item.is_dir() and item.name.startswith("gra_"):
                # gra_01_chat -> chat
                function_name = item.name.split("_", 2)[-1] if "_" in item.name else item.name
                gradio_functions[function_name] = {
                    "path": item,
                    "name": function_name,
                    "directory": item.name
                }
        
        return gradio_functions
    
    def handle(self, function_name=None, verbose=False, fix=False, *args, **kwargs):
        """Gradioテストのメイン処理"""
        print("🧪 Gradio機能テスト開始...")
        print(f"📡 テスト対象URL: {self.base_url}")
        print("=" * 50)
        
        if function_name:
            # 個別機能テスト
            result = self._test_single_function(function_name, verbose, fix)
            return result
        else:
            # 全機能テスト
            return self._test_all_functions(verbose, fix)
    
    def _test_single_function(self, function_name, verbose=False, fix=False):
        """単一Gradio機能のテスト"""
        if function_name not in self.gradio_functions:
            print(f"❌ 機能 '{function_name}' が見つかりません")
            print(f"🔍 利用可能な機能: {list(self.gradio_functions.keys())}")
            return False
            
        function_info = self.gradio_functions[function_name]
        print(f"🧪 {function_name} 機能をテスト中...")
        
        # テスト実行
        result = self._run_gradio_test(function_info, verbose)
        
        if not result and fix:
            print(f"🔧 {function_name} の自動修正を試行中...")
            self._attempt_fix(function_info)
            
        return result
    
    def _test_all_functions(self, verbose=False, fix=False):
        """全Gradio機能のテスト"""
        results = {}
        total_functions = len(self.gradio_functions)
        passed_functions = 0
        
        for function_name, function_info in self.gradio_functions.items():
            print(f"🧪 {function_name} 機能をテスト中...")
            result = self._run_gradio_test(function_info, verbose)
            results[function_name] = result
            
            if result:
                passed_functions += 1
            elif fix: