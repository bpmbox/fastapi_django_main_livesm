"""
„Éè„Ç§„Éñ„É™„ÉÉ„ÉâÊâøË™ç„Ç∑„Çπ„ÉÜ„É†
GitHub ISSUE ‚Üí SQLiteÊâøË™ç ‚Üí ÂÆüË°å ‚Üí GitHubÁµêÊûúÈÄöÁü•
"""

import sqlite3
import requests
import json
from datetime import datetime
from typing import Dict, List, Optional
from enum import Enum

class ApprovalStatus(Enum):
    PENDING_REVIEW = "pending_review"
    APPROVED = "approved" 
    REJECTED = "rejected"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    FAILED = "failed"

class HybridApprovalSystem:
    """GitHub ISSUE + SQLiteÊâøË™ç„Ç∑„Çπ„ÉÜ„É†"""
    
    def __init__(self, github_token: str, db_path: str = "prompts.db"):
        self.github_token = github_token
        self.db_path = db_path
        self.headers = {
            'Authorization': f'token {github_token}',
            'Accept': 'application/vnd.github.v3+json'
        }
        self.init_approval_db()
    
    def init_approval_db(self):
        """ÊâøË™çÁÆ°ÁêÜÁî®„ÅÆ„ÉÜ„Éº„Éñ„É´„ÇíËøΩÂä†"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # ÊâøË™çÁÆ°ÁêÜ„ÉÜ„Éº„Éñ„É´
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS approval_queue (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                github_issue_number INTEGER,
                github_repo TEXT,
                issue_title TEXT,
                issue_body TEXT,
                requester TEXT,
                approval_status TEXT DEFAULT 'pending_review',
                priority INTEGER DEFAULT 5,
                estimated_time TEXT,
                reviewer_notes TEXT,
                approved_by TEXT,
                approved_at TIMESTAMP,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # ÂÆüË°å„É≠„Ç∞„ÉÜ„Éº„Éñ„É´  
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS execution_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                approval_id INTEGER,
                execution_start TIMESTAMP,
                execution_end TIMESTAMP,
                status TEXT,
                result_summary TEXT,
                github_repo_url TEXT,
                error_message TEXT,
                FOREIGN KEY (approval_id) REFERENCES approval_queue (id)
            )
        ''')
        
        conn.commit()
        conn.close()
        print("‚úÖ ÊâøË™ç„Ç∑„Çπ„ÉÜ„É†„Éá„Éº„Çø„Éô„Éº„ÇπÂàùÊúüÂåñÂÆå‰∫Ü")
    
    def import_issue_to_approval_queue(self, repo_owner: str, repo_name: str, issue_number: int) -> Dict:
        """GitHub ISSUE„ÇíÊâøË™ç„Ç≠„É•„Éº„Å´ËøΩÂä†"""
        try:
            # GitHub API„Åã„ÇâISSUEÊÉÖÂ†±„ÇíÂèñÂæó
            url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/{issue_number}"
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            
            issue_data = response.json()
            
            # ÊâøË™ç„Ç≠„É•„Éº„Å´ËøΩÂä†
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
            cursor.execute(
                'SELECT id FROM approval_queue WHERE github_issue_number = ? AND github_repo = ?',
                (issue_number, f"{repo_owner}/{repo_name}")
            )
            
            if cursor.fetchone():
                conn.close()
                return {'success': False, 'error': 'ISSUE already in queue'}
            
            # ÂÑ™ÂÖàÂ∫¶„ÇíËá™ÂãïÂà§ÂÆö
            priority = self._calculate_priority(issue_data)
            estimated_time = self._estimate_execution_time(issue_data)
            
            cursor.execute('''
                INSERT INTO approval_queue 
                (github_issue_number, github_repo, issue_title, issue_body, 
                 requester, priority, estimated_time, approval_status)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                issue_number,
                f"{repo_owner}/{repo_name}",
                issue_data['title'],
                issue_data['body'],
                issue_data['user']['login'],
                priority,
                estimated_time,
                ApprovalStatus.PENDING_REVIEW.value
            ))
            
            approval_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            # GitHub ISSUE„Å´„Ç≥„É°„É≥„ÉàËøΩÂä†
            self._post_approval_comment(repo_owner, repo_name, issue_number, approval_id)
            
            return {
                'success': True, 
                'approval_id': approval_id,
                'status': 'added_to_queue'
            }
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _calculate_priority(self, issue_data: Dict) -> int:
        """ISSUE„ÅÆÂÑ™ÂÖàÂ∫¶„ÇíËá™ÂãïÂà§ÂÆö"""
        priority = 5  # „Éá„Éï„Ç©„É´„Éà
        
        title = issue_data['title'].lower()
        body = (issue_data['body'] or '').lower()
        labels = [label['name'].lower() for label in issue_data.get('labels', [])]
        
        # Á∑äÊÄ•Â∫¶Âà§ÂÆö
        if any(word in title + body for word in ['urgent', 'Á∑äÊÄ•', 'critical', 'ÈáçË¶Å']):
            priority = 1
        elif any(word in title + body for word in ['security', '„Çª„Ç≠„É•„É™„ÉÜ„Ç£', 'bug', '„Éê„Ç∞']):
            priority = 2
        elif any(word in title + body for word in ['api', 'database', '„Éá„Éº„Çø„Éô„Éº„Çπ']):
            priority = 3
        elif any(word in title + body for word in ['enhancement', 'Ê©üËÉΩËøΩÂä†', 'feature']):
            priority = 4
        
        # „É©„Éô„É´„Å´„Çà„ÇãË™øÊï¥
        if 'high-priority' in labels:
            priority = min(priority, 2)
        elif 'low-priority' in labels:
            priority = max(priority, 6)
            
        return priority
    
    def _estimate_execution_time(self, issue_data: Dict) -> str:
        """ÂÆüË°åÊôÇÈñì„ÇíÊé®ÂÆö"""
        body = (issue_data['body'] or '').lower()
        title = issue_data['title'].lower()
        
        # Ë§áÈõëÂ∫¶„Å´„Çà„ÇãÊé®ÂÆö
        if any(word in title + body for word in ['microservice', 'blockchain', 'ai', 'ml']):
            return "60-90 minutes"
        elif any(word in title + body for word in ['api', 'database', 'web']):
            return "30-60 minutes"
        elif any(word in title + body for word in ['simple', 'basic', '„Ç∑„É≥„Éó„É´']):
            return "15-30 minutes"
        else:
            return "30-45 minutes"
    
    def _post_approval_comment(self, repo_owner: str, repo_name: str, issue_number: int, approval_id: int):
        """ÊâøË™çÂæÖ„Å°„Ç≥„É°„É≥„Éà„ÇíÊäïÁ®ø"""
        comment = f"""üîç **ÊâøË™ç„Ç≠„É•„Éº„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„Åü**

„Åì„Çì„Å´„Å°„ÅØÔºÅ„Ç∑„Çπ„ÉÜ„É†ÁîüÊàê„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂèó‰ø°„ÅÑ„Åü„Åó„Åæ„Åó„Åü„ÄÇ

üìã **ÊâøË™çID**: #{approval_id}
üîÑ **„Çπ„ÉÜ„Éº„Çø„Çπ**: ÊâøË™çÂæÖ„Å°
üëÄ **ÊãÖÂΩìËÄÖ**: GitHub Copilot

## üìù Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:
1. **Ë¶Å‰ª∂Á¢∫Ë™ç**: „Éó„É≠„É≥„Éó„ÉàÂÜÖÂÆπ„ÅÆÁ≤æÊüª
2. **ÂÑ™ÂÖàÂ∫¶Âà§ÂÆö**: ‰ªñ„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„Å®„ÅÆÂÑ™ÂÖàÈ†Ü‰ΩçÊ±∫ÂÆö
3. **ÊâøË™ç„ÉªÂÆüË°å**: „Ç∑„Çπ„ÉÜ„É†ÁîüÊàê„ÅÆÈñãÂßã
4. **ÁµêÊûúÈÄöÁü•**: ÂÆåÊàê„Åó„Åü„Ç∑„Çπ„ÉÜ„É†„ÅÆ„ÅäÂ±ä„Åë

‚è∞ **‰∫àÊÉ≥ÂÆüË°åÊôÇÈñì**: ÊâøË™çÂæå30-60ÂàÜÁ®ãÂ∫¶

ÊâøË™ç„Åï„ÇåÊ¨°Á¨¨„ÄÅËá™Âãï„Åß„Ç∑„Çπ„ÉÜ„É†ÁîüÊàê„ÇíÈñãÂßã„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ
ÈÄ≤Êçó„ÅØ„Åì„ÅÆISSUE„ÅßÈöèÊôÇ„ÅäÁü•„Çâ„Åõ„Åó„Åæ„Åô„ÄÇ

---
**ü§ñ GitHub CopilotËá™ÂãïÊâøË™ç„Ç∑„Çπ„ÉÜ„É†**
"""
        
        try:
            url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/{issue_number}/comments"
            response = requests.post(url, headers=self.headers, json={'body': comment})
            response.raise_for_status()
        except Exception as e:
            print(f"‚ùå „Ç≥„É°„É≥„ÉàÊäïÁ®ø„Ç®„É©„Éº: {e}")
    
    def get_approval_queue(self, status: Optional[str] = None) -> List[Dict]:
        """ÊâøË™ç„Ç≠„É•„Éº„ÇíÂèñÂæó"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        if status:
            cursor.execute('''
                SELECT id, github_issue_number, github_repo, issue_title, 
                       requester, approval_status, priority, estimated_time, created_at
                FROM approval_queue 
                WHERE approval_status = ?
                ORDER BY priority ASC, created_at ASC
            ''', (status,))
        else:
            cursor.execute('''
                SELECT id, github_issue_number, github_repo, issue_title, 
                       requester, approval_status, priority, estimated_time, created_at
                FROM approval_queue 
                ORDER BY priority ASC, created_at ASC
            ''')
        
        rows = cursor.fetchall()
        conn.close()
        
        queue = []
        for row in rows:
            queue.append({
                'id': row[0],
                'issue_number': row[1],
                'repo': row[2],
                'title': row[3],
                'requester': row[4],
                'status': row[5],
                'priority': row[6],
                'estimated_time': row[7],
                'created_at': row[8]
            })
        
        return queue
    
    def approve_request(self, approval_id: int, reviewer: str, notes: str = "") -> Dict:
        """„É™„ÇØ„Ç®„Çπ„Éà„ÇíÊâøË™ç"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE approval_queue 
                SET approval_status = ?, approved_by = ?, approved_at = ?, 
                    reviewer_notes = ?, updated_at = ?
                WHERE id = ?
            ''', (
                ApprovalStatus.APPROVED.value,
                reviewer,
                datetime.now().isoformat(),
                notes,
                datetime.now().isoformat(),
                approval_id
            ))
            
            if cursor.rowcount == 0:
                conn.close()
                return {'success': False, 'error': 'Approval ID not found'}
            
            # ÊâøË™ç„Åï„Çå„Åü„Ç¢„Ç§„ÉÜ„É†„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó
            cursor.execute('''
                SELECT github_issue_number, github_repo, issue_title, issue_body
                FROM approval_queue WHERE id = ?
            ''', (approval_id,))
            
            item = cursor.fetchone()
            conn.commit()
            conn.close()
            
            if item:
                # GitHub ISSUE„Å´ÊâøË™çÈÄöÁü•
                repo_parts = item[1].split('/')
                self._post_approval_notification(repo_parts[0], repo_parts[1], item[0], approved=True)
                
                # Ëá™ÂãïÂÆüË°å„Çí„Ç≠„É•„Éº„Å´ËøΩÂä†ÔºàÂÆüÈöõ„ÅÆÂÆüË°å„ÅØÂà•„Éó„É≠„Çª„ÇπÔºâ
                return {
                    'success': True,
                    'status': 'approved',
                    'item': {
                        'issue_number': item[0],
                        'repo': item[1], 
                        'title': item[2],
                        'body': item[3]
                    }
                }
            
            return {'success': True, 'status': 'approved'}
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def reject_request(self, approval_id: int, reviewer: str, reason: str) -> Dict:
        """„É™„ÇØ„Ç®„Çπ„Éà„ÇíÊãíÂê¶"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                UPDATE approval_queue 
                SET approval_status = ?, approved_by = ?, approved_at = ?, 
                    reviewer_notes = ?, updated_at = ?
                WHERE id = ?
            ''', (
                ApprovalStatus.REJECTED.value,
                reviewer,
                datetime.now().isoformat(),
                reason,
                datetime.now().isoformat(),
                approval_id
            ))
            
            # ÊãíÂê¶„Åï„Çå„Åü„Ç¢„Ç§„ÉÜ„É†„ÅÆÊÉÖÂ†±„ÇíÂèñÂæó
            cursor.execute('''
                SELECT github_issue_number, github_repo
                FROM approval_queue WHERE id = ?
            ''', (approval_id,))
            
            item = cursor.fetchone()
            conn.commit()
            conn.close()
            
            if item:
                # GitHub ISSUE„Å´ÊãíÂê¶ÈÄöÁü•
                repo_parts = item[1].split('/')
                self._post_rejection_notification(repo_parts[0], repo_parts[1], item[0], reason)
            
            return {'success': True, 'status': 'rejected'}
            
        except Exception as e:
            return {'success': False, 'error': str(e)}
    
    def _post_approval_notification(self, repo_owner: str, repo_name: str, issue_number: int, approved: bool):
        """ÊâøË™ç„ÉªÊãíÂê¶ÈÄöÁü•„ÇíÊäïÁ®ø"""
        if approved:
            comment = """‚úÖ **ÊâøË™çÂÆå‰∫Ü - „Ç∑„Çπ„ÉÜ„É†ÁîüÊàêÈñãÂßãÔºÅ**

„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ„É™„ÇØ„Ç®„Çπ„Éà„ÅåÊâøË™ç„Åï„Çå„Åæ„Åó„Åü„ÄÇ

üöÄ **„Çπ„ÉÜ„Éº„Çø„Çπ**: „Ç∑„Çπ„ÉÜ„É†ÁîüÊàê‰∏≠
‚è∞ **ÈñãÂßãÊôÇÂàª**: ‰ªä„Åô„Åê
üîß **ÊãÖÂΩìAI**: GitHub Copilot

GPT-ENGINEER„Åß„Ç∑„Çπ„ÉÜ„É†ÁîüÊàê„ÇíÈñãÂßã„Åó„Åæ„Åô„ÄÇ
ÂÆå‰∫ÜÊ¨°Á¨¨„ÄÅÁµêÊûú„Çí„Åì„ÅÆISSUE„Åß„ÅäÁü•„Çâ„Åõ„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ

---
**ü§ñ GitHub CopilotËá™ÂãïÊâøË™ç„Ç∑„Çπ„ÉÜ„É†**
"""
        else:
            comment = """‚ùå **„É™„ÇØ„Ç®„Çπ„ÉàÊãíÂê¶**

Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„Åå„ÄÅ„Åì„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„ÅØÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü„ÄÇ

Ë©≥Á¥∞„Å™ÁêÜÁî±„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅÊâøË™çËÄÖ„Åã„Çâ„ÅÆË™¨Êòé„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ
ÊîπÂñÑÂæå„ÄÅÂÜçÂ∫¶„É™„ÇØ„Ç®„Çπ„Éà„Åó„Å¶„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÄÇ

---
**ü§ñ GitHub CopilotËá™ÂãïÊâøË™ç„Ç∑„Çπ„ÉÜ„É†**
"""
        
        try:
            url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/{issue_number}/comments"
            response = requests.post(url, headers=self.headers, json={'body': comment})
            response.raise_for_status()
        except Exception as e:
            print(f"‚ùå ÈÄöÁü•ÊäïÁ®ø„Ç®„É©„Éº: {e}")
    
    def _post_rejection_notification(self, repo_owner: str, repo_name: str, issue_number: int, reason: str):
        """ÊãíÂê¶ÈÄöÁü•„ÇíÊäïÁ®ø"""
        comment = f"""‚ùå **„É™„ÇØ„Ç®„Çπ„ÉàÊãíÂê¶**

Áî≥„ÅóË®≥„Åî„Åñ„ÅÑ„Åæ„Åõ„Çì„Åå„ÄÅ„Åì„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà„ÅØÊãíÂê¶„Åï„Çå„Åæ„Åó„Åü„ÄÇ

üìù **ÊãíÂê¶ÁêÜÁî±:**
{reason}

üîÑ **Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó:**
- Ë¶Å‰ª∂„ÅÆË¶ãÁõ¥„Åó„ÉªË©≥Á¥∞Âåñ
- ÊäÄË°ìÁöÑÂà∂Á¥Ñ„ÅÆÁ¢∫Ë™ç
- ÊîπÂñÑÂæå„ÅÆÂÜçÊäïÁ®ø

„Åî‰∏çÊòé„Å™ÁÇπ„Åå„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„Çâ„ÄÅ„ÅäÊ∞óËªΩ„Å´„ÅäÂ£∞„Åå„Åë„Åè„Å†„Åï„ÅÑ„ÄÇ

---
**ü§ñ GitHub CopilotËá™ÂãïÊâøË™ç„Ç∑„Çπ„ÉÜ„É†**
"""
        
        try:
            url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/issues/{issue_number}/comments"
            response = requests.post(url, headers=self.headers, json={'body': comment})
            response.raise_for_status()
        except Exception as e:
            print(f"‚ùå ÊãíÂê¶ÈÄöÁü•ÊäïÁ®ø„Ç®„É©„Éº: {e}")


def create_approval_interface():
    """ÊâøË™çÁÆ°ÁêÜ„ÅÆGradio„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ"""
    import gradio as gr
    
    approval_system = None
    
    def initialize_system(github_token):
        global approval_system
        try:
            approval_system = HybridApprovalSystem(github_token)
            return "‚úÖ ÊâøË™ç„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü"
        except Exception as e:
            return f"‚ùå ÂàùÊúüÂåñ„Ç®„É©„Éº: {str(e)}"
    
    def import_issue(repo_owner, repo_name, issue_number):
        if not approval_system:
            return "‚ùå „Ç∑„Çπ„ÉÜ„É†„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
        
        try:
            result = approval_system.import_issue_to_approval_queue(repo_owner, repo_name, int(issue_number))
            # Ensure we always return a string for Gradio components
            if isinstance(result, dict):
                if result.get('success'):
                    return f"‚úÖ ISSUE #{issue_number} „ÇíÊâøË™ç„Ç≠„É•„Éº„Å´ËøΩÂä†„Åó„Åæ„Åó„Åü (ID: {result.get('approval_id', 'Unknown')})"
                else:
                    return f"‚ùå „Ç®„É©„Éº: {result.get('error', '‰∏çÊòé„Å™„Ç®„É©„Éº')}"
            else:
                return str(result)
        except Exception as e:
            return f"‚ùå „Ç®„É©„Éº: {str(e)}"
    
    def get_queue_display():
        if not approval_system:
            return []
        
        queue = approval_system.get_approval_queue()
        table_data = []
        
        for item in queue:
            priority_icon = "üî¥" if item['priority'] <= 2 else "üü°" if item['priority'] <= 4 else "üü¢"
            status_icon = {
                'pending_review': '‚è≥',
                'approved': '‚úÖ', 
                'rejected': '‚ùå',
                'in_progress': 'üöÄ',
                'completed': 'üéâ',
                'failed': 'üí•'
            }.get(item['status'], '‚ùì')
            
            table_data.append([
                item['id'],
                f"{priority_icon} {item['priority']}",
                f"{status_icon} {item['status']}",
                item['title'][:50] + '...' if len(item['title']) > 50 else item['title'],
                item['requester'],
                item['estimated_time'],
                item['created_at'][:16]
            ])
        
        return table_data
    
    def approve_item(approval_id, reviewer, notes):
        if not approval_system:
            return "‚ùå „Ç∑„Çπ„ÉÜ„É†„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
        
        try:
            result = approval_system.approve_request(int(approval_id), reviewer, notes)
            # Ensure we always return a string for Gradio components
            if isinstance(result, dict):
                if result.get('success'):
                    return f"‚úÖ ÊâøË™çID {approval_id} „ÇíÊâøË™ç„Åó„Åæ„Åó„Åü"
                else:
                    return f"‚ùå „Ç®„É©„Éº: {result.get('error', '‰∏çÊòé„Å™„Ç®„É©„Éº')}"
            else:
                return str(result)
        except Exception as e:
            return f"‚ùå „Ç®„É©„Éº: {str(e)}"
    
    def reject_item(approval_id, reviewer, reason):
        if not approval_system:
            return "‚ùå „Ç∑„Çπ„ÉÜ„É†„ÅåÂàùÊúüÂåñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì"
        
        try:
            result = approval_system.reject_request(int(approval_id), reviewer, reason)
            # Ensure we always return a string for Gradio components
            if isinstance(result, dict):
                if result.get('success'):
                    return f"‚úÖ ÊâøË™çID {approval_id} „ÇíÊãíÂê¶„Åó„Åæ„Åó„Åü"
                else:
                    return f"‚ùå „Ç®„É©„Éº: {result.get('error', '‰∏çÊòé„Å™„Ç®„É©„Éº')}"
            else:
                return str(result)
        except Exception as e:
            return f"‚ùå „Ç®„É©„Éº: {str(e)}"
    
    with gr.Blocks(title="üîç ÊâøË™çÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†") as interface:
        gr.Markdown("# üîç ÊâøË™çÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†")
        gr.Markdown("GitHub ISSUE ‚Üí ÊâøË™ç ‚Üí ÂÆüË°å„ÅÆÁÆ°ÁêÜ")
        
        with gr.Row():
            github_token_input = gr.Textbox(label="GitHub Token", type="password")
            init_btn = gr.Button("ÂàùÊúüÂåñ", variant="primary")
            init_result = gr.Textbox(label="ÂàùÊúüÂåñÁµêÊûú", interactive=False)
        
        with gr.Tabs():
            with gr.TabItem("üì• ISSUEÂèñ„ÇäËæº„Åø"):
                with gr.Row():
                    repo_owner_input = gr.Textbox(label="„É™„Éù„Ç∏„Éà„É™„Ç™„Éº„Éä„Éº", placeholder="username")
                    repo_name_input = gr.Textbox(label="„É™„Éù„Ç∏„Éà„É™Âêç", placeholder="repository")
                    issue_number_input = gr.Number(label="ISSUEÁï™Âè∑", precision=0)
                    import_btn = gr.Button("Âèñ„ÇäËæº„Åø", variant="primary")
                
                import_result = gr.Textbox(label="Âèñ„ÇäËæº„ÅøÁµêÊûú", interactive=False)
            
            with gr.TabItem("‚è≥ ÊâøË™ç„Ç≠„É•„Éº"):
                refresh_queue_btn = gr.Button("üîÑ „Ç≠„É•„ÉºÊõ¥Êñ∞")
                approval_queue = gr.Dataframe(
                    headers=["ID", "ÂÑ™ÂÖàÂ∫¶", "„Çπ„ÉÜ„Éº„Çø„Çπ", "„Çø„Ç§„Éà„É´", "‰æùÈ†ºËÄÖ", "‰∫àÊÉ≥ÊôÇÈñì", "‰ΩúÊàêÊó•ÊôÇ"],
                    datatype=["number", "str", "str", "str", "str", "str", "str"],
                    value=[],
                    interactive=False,
                    height=400
                )
            
            with gr.TabItem("‚úÖ ÊâøË™ç„ÉªÊãíÂê¶"):
                with gr.Row():
                    approval_id_input = gr.Number(label="ÊâøË™çID", precision=0)
                    reviewer_input = gr.Textbox(label="ÊâøË™çËÄÖ", placeholder="GitHub Copilot")
                
                with gr.Row():
                    notes_input = gr.Textbox(label="ÊâøË™ç„É°„É¢", placeholder="ÊâøË™çÁêÜÁî±„ÉªÊ≥®ÊÑè‰∫ãÈ†Ö")
                    reason_input = gr.Textbox(label="ÊãíÂê¶ÁêÜÁî±", placeholder="ÊãíÂê¶„Åô„ÇãÁêÜÁî±")
                
                with gr.Row():
                    approve_btn = gr.Button("‚úÖ ÊâøË™ç", variant="primary")
                    reject_btn = gr.Button("‚ùå ÊãíÂê¶", variant="stop")
                
                action_result = gr.Textbox(label="Êìç‰ΩúÁµêÊûú", interactive=False)
        
        # „Ç§„Éô„É≥„Éà„Éè„É≥„Éâ„É©„Éº
        init_btn.click(fn=initialize_system, inputs=github_token_input, outputs=init_result)
        import_btn.click(
            fn=import_issue, 
            inputs=[repo_owner_input, repo_name_input, issue_number_input],
            outputs=import_result
        )
        refresh_queue_btn.click(fn=get_queue_display, outputs=approval_queue)
        approve_btn.click(
            fn=approve_item,
            inputs=[approval_id_input, reviewer_input, notes_input],
            outputs=action_result
        )
        reject_btn.click(
            fn=reject_item,
            inputs=[approval_id_input, reviewer_input, reason_input],
            outputs=action_result
        )
        
        # ÂàùÊúüË™≠„ÅøËæº„Åø
        interface.load(fn=get_queue_display, outputs=approval_queue)
    
    return interface

# ÊâøË™çÁÆ°ÁêÜ„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ
approval_interface = create_approval_interface()
