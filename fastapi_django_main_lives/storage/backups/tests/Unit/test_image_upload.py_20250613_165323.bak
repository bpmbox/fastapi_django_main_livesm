#!/usr/bin/env python3
"""
GitHub Issue画像アップロードテスト
既存のキャプチャ画像をGitHubイシューにアップロードしてテスト
"""

import asyncio
import subprocess
import json
import os
from pathlib import Path
from datetime import datetime

class GitHubImageUploadTest:
    def __init__(self):
        self.image_dir = Path("/workspaces/fastapi_django_main_live/docs/images/debug_captures")
        self.test_issue_number = None
        
    def get_latest_image(self):
        """最新のキャプチャ画像を取得"""
        images = list(self.image_dir.glob("*.png"))
        if not images:
            print("❌ キャプチャ画像が見つかりません")
            return None
        
        latest_image = max(images, key=lambda p: p.stat().st_mtime)
        print(f"📸 使用する画像: {latest_image.name}")
        return latest_image
    
    def create_test_issue(self):
        """テスト用のイシューを作成"""
        print("🆕 テスト用イシューを作成中...")
        
        title = f"🧪 Image Upload Test - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        body = """## 🧪 画像アップロードテスト

このイシューは画像アップロード機能のテスト用です。

### テスト内容
- [ ] 画像のアップロード
- [ ] 画像の表示確認
- [ ] ファイルパスの確認

### テスト実行時刻
""" + datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        try:
            # GitHub CLIでイシュー作成
            cmd = [
                "gh", "issue", "create",
                "--title", title,
                "--body", body,
                "--label", "test,automation"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            
            # イシュー番号を抽出
            issue_url = result.stdout.strip()
            issue_number = issue_url.split('/')[-1]
            
            print(f"✅ テストイシュー作成完了: #{issue_number}")
            print(f"🌐 URL: {issue_url}")
            
            self.test_issue_number = issue_number
            return issue_number
            
        except subprocess.CalledProcessError as e:
            print(f"❌ イシュー作成エラー: {e}")
            print(f"❌ stderr: {e.stderr}")
            return None
    
    def upload_image_to_issue(self, image_path, issue_number):
        """画像をイシューにアップロード"""
        print(f"📤 画像アップロード開始: {image_path.name}")
        
        comment_body = f"""## 📸 スクリーンショット テスト

**ファイル名**: `{image_path.name}`  
**ファイルパス**: `{image_path}`  
**サイズ**: {image_path.stat().st_size} bytes  
**作成日時**: {datetime.fromtimestamp(image_path.stat().st_mtime)}

### キャプチャ画像
"""
        
        try:
            # 一時的なMarkdownファイルを作成
            temp_md = Path("/tmp/comment_with_image.md")
            with open(temp_md, 'w', encoding='utf-8') as f:
                f.write(comment_body)
            
            # GitHub CLIでコメント追加（画像付き）
            cmd = [
                "gh", "issue", "comment", issue_number,
                "--body-file", str(temp_md)
            ]
            
            # 画像を添付
            cmd.extend(["--add-attachment", str(image_path)])
            
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            
            print(f"✅ 画像アップロード完了")
            print(f"📝 コメント追加: {result.stdout.strip()}")
            
            # 一時ファイルを削除
            temp_md.unlink()
            
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"❌ 画像アップロードエラー: {e}")
            print(f"❌ stderr: {e.stderr}")
            return False
    
    def verify_upload(self, issue_number):
        """アップロード確認"""
        print(f"🔍 アップロード確認中...")
        
        try:
            # イシューの詳細を取得
            cmd = ["gh", "issue", "view", issue_number, "--json", "comments,body"]
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            
            issue_data = json.loads(result.stdout)
            
            # コメントに画像URLが含まれているかチェック
            has_image = False
            for comment in issue_data.get("comments", []):
                if "user-attachments" in comment.get("body", "") or ".png" in comment.get("body", ""):
                    has_image = True
                    print(f"✅ 画像URLを確認: コメント内で画像を検出")
                    break
            
            if not has_image:
                print("⚠️ 画像URLが見つかりません")
                
            return has_image
            
        except subprocess.CalledProcessError as e:
            print(f"❌ 確認エラー: {e}")
            return False
    
    def run_complete_test(self):
        """完全なテストを実行"""
        print("🚀 GitHub画像アップロード完全テスト開始")
        print("=" * 50)
        
        # 1. 最新画像を取得
        image_path = self.get_latest_image()
        if not image_path:
            return False
        
        # 2. テストイシューを作成
        issue_number = self.create_test_issue()
        if not issue_number:
            return False
        
        # 3. 画像をアップロード
        upload_success = self.upload_image_to_issue(image_path, issue_number)
        if not upload_success:
            return False
        
        # 4. アップロード確認
        verify_success = self.verify_upload(issue_number)
        
        # 5. 結果サマリー
        print("\n" + "=" * 50)
        print("🎯 テスト結果サマリー")
        print("=" * 50)
        print(f"📸 使用画像: {image_path.name}")
        print(f"🆔 テストイシュー: #{issue_number}")
        print(f"📤 アップロード: {'✅ 成功' if upload_success else '❌ 失敗'}")
        print(f"🔍 確認: {'✅ 成功' if verify_success else '❌ 失敗'}")
        
        overall_success = upload_success and verify_success
        print(f"🎉 総合結果: {'✅ 成功' if overall_success else '❌ 失敗'}")
        
        return overall_success

if __name__ == "__main__":
    tester = GitHubImageUploadTest()
    success = tester.run_complete_test()
    
    if success:
        print("\n🎉 画像アップロードテスト完了！GitHubでの画像表示が可能です。")
    else:
        print("\n⚠️ 画像アップロードテストで問題が発生しました。")
