#!/usr/bin/env python3
"""
DIパターンの簡単テスト
=====================
"""

import asyncio
from pathlib import Path

# データクラスをシンプルに定義
class DebugRecord:
    def __init__(self, **kwargs):
        self.id = kwargs.get('id')
        self.timestamp = kwargs.get('timestamp', '')
        self.url = kwargs.get('url', '')
        self.description = kwargs.get('description', '')
        self.selector = kwargs.get('selector')
        self.capture_path = kwargs.get('capture_path', '')
        self.analysis_prompt = kwargs.get('analysis_prompt', '')
        self.analysis_result = kwargs.get('analysis_result')
        self.status = kwargs.get('status', 'captured')
        self.created_at = kwargs.get('created_at', '')
        self.updated_at = kwargs.get('updated_at', '')

async def simple_di_test():
    """簡単なDIテスト"""
    print("🧪 簡単なDIパターンテスト開始")
    
    try:
        # DIレイヤーのインポートテスト
        import sys
        sys.path.append('/workspaces/fastapi_django_main_live')
        
        print("📦 DIモジュールのインポート中...")
        from controllers.gra_03_programfromdocs.database_di_layer import (
            RepositoryFactory,
            DebugHistoryService,
            DebugRecord as DIDebugRecord
        )
        print("✅ DIモジュールインポート成功")
        
        # SQLiteサービス作成
        print("📊 SQLiteサービス作成中...")
        sqlite_service = RepositoryFactory.create_service("sqlite")
        print("✅ SQLiteサービス作成成功")
        
        # テストデータ保存
        print("💾 テストデータ保存中...")
        record_id = await sqlite_service.save_debug_session(
            url="https://test-di.example.com",
            description="DI統合テスト - 簡単版",
            selector=".test-class",
            capture_path="/tmp/test_di.png",
            analysis_prompt="テスト用プロンプト"
        )
        print(f"✅ データ保存成功: Record ID {record_id}")
        
        # 履歴取得
        print("📋 履歴取得中...")
        history = await sqlite_service.get_debug_history_formatted(3)
        print(f"✅ 履歴取得成功:\n{history}")
        
        print("🎉 簡単DIテスト完了!")
        
    except ImportError as e:
        print(f"❌ インポートエラー: {e}")
        print("💡 DIレイヤーファイルに問題がある可能性があります")
        
    except Exception as e:
        print(f"❌ 実行エラー: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(simple_di_test())
