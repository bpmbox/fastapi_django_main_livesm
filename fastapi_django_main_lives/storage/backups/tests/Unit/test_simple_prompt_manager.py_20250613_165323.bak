#!/usr/bin/env python3
"""
シンプルなプロンプト管理システムのテスト版
タブエラーを修正するための検証用
"""

import sys
import os
sys.path.append('/workspaces/fastapi_django_main_live')

import gradio as gr
import sqlite3
from datetime import datetime
from typing import List, Tuple

# データベース設定
DB_PATH = "prompts.db"

def get_prompts() -> List[Tuple]:
    """全プロンプトを取得"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT id, title, url, created_at FROM prompts ORDER BY created_at DESC')
        prompts = cursor.fetchall()
        conn.close()
        return prompts
    except Exception as e:
        print(f"❌ プロンプト取得エラー: {e}")
        return []

def get_prompt_content(prompt_id: int) -> str:
    """指定IDのプロンプト内容を取得"""
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('SELECT content FROM prompts WHERE id = ?', (prompt_id,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else ""
    except Exception as e:
        print(f"❌ プロンプト内容取得エラー: {e}")
        return ""

def get_prompt_choices():
    """プロンプト一覧のchoicesを取得"""
    prompts = get_prompts()
    choices = []
    for prompt in prompts:
        id_, title, url, created_at = prompt
        display_text = f"[{id_}] {title} ({created_at[:10]})"
        choices.append((display_text, str(id_)))
    return choices

# シンプルなGradioインターフェース
def create_interface():
    """エラーの少ないシンプルなインターフェースを作成"""
    
    def handle_load_prompt(selected_prompt):
        print(f"📥 プロンプト読み込み要求: {selected_prompt}")
        if selected_prompt:
            try:
                # 値がタプルの場合、表示テキストから抽出
                if isinstance(selected_prompt, tuple):
                    display_text, prompt_id = selected_prompt
                else:
                    # 文字列の場合、IDを抽出
                    prompt_id = selected_prompt.split(']')[0][1:] if '[' in selected_prompt else selected_prompt
                
                print(f"🔍 抽出されたID: {prompt_id}")
                content = get_prompt_content(int(prompt_id))
                print(f"📄 取得した内容の長さ: {len(content)} 文字")
                return content
            except Exception as e:
                print(f"❌ プロンプト読み込みエラー: {e}")
                return f"エラー: {str(e)}"
        return ""
    
    # インターフェース作成
    with gr.Blocks(title="🚀 プロンプト管理テスト", theme=gr.themes.Soft()) as interface:
        gr.Markdown("# 🧪 プロンプト管理システム - テスト版")
        gr.Markdown("タブエラーを修正するためのシンプル版です")
        
        # シンプルな単一画面レイアウト
        with gr.Row():
            with gr.Column(scale=1):
                prompt_dropdown = gr.Dropdown(
                    choices=get_prompt_choices(),
                    label="📋 保存済みプロンプト一覧",
                    interactive=True,
                    value=None
                )
                load_btn = gr.Button("📥 プロンプトを読み込み", variant="primary")
                
            with gr.Column(scale=2):
                prompt_content = gr.Textbox(
                    label="📝 プロンプト内容",
                    lines=15,
                    value="",
                    placeholder="プロンプトを選択してください..."
                )
        
        # イベント接続
        load_btn.click(
            handle_load_prompt,
            inputs=[prompt_dropdown],
            outputs=[prompt_content]
        )
        
        # ドロップダウン選択時の自動読み込み
        prompt_dropdown.change(
            handle_load_prompt,
            inputs=[prompt_dropdown],
            outputs=[prompt_content]
        )
    
    return interface

if __name__ == "__main__":
    print("🧪 シンプルプロンプト管理システムを起動中...")
    interface = create_interface()
    interface.launch(
        server_name="0.0.0.0",
        server_port=7863,  # 未使用ポートを指定
        share=False,
        debug=True
    )
